package ${package.name};

import java.util.HashMap;
import java.util.Map;

import javax.annotation.Generated;

import org.mdl4ui.base.model.*;
import org.mdl4ui.fields.model.*;
import org.mdl4ui.fields.model.event.*;

@Generated(value = "${process.class}",  date = "${process.date}")
public final class ${target.class.name} implements FieldInitializerFactory {
	
	private final Map<FieldID, ${enum.support}> ${map.name} = new HashMap<FieldID, ${enum.support}>();
	private final FieldEventMulticaster multicaster = new DefaultFieldEventMulticaster();

	public ${target.class.name}() {
${class.init}
	}

	private enum ${enum.support} {
${constants}
	
		private final FieldInitializerInterceptor initializer;
	
		${enum.support}(FieldInitializer initializer) {
			this.initializer = new FieldInitializerInterceptor(initializer);
		}
	}
	
	@Override
	public final FieldInitializer get(FieldID fieldId) {
	    final ${enum.support} initializer = ${map.name}.get(fieldId);
	    if (initializer == null)
	        return null;
	    initializer.initializer.setFactory(this);
	    return initializer.initializer;
	}
	
	@Override
	public void notify(FieldEvent event) {
		multicaster.notify(event);
	}
	
    @Override
    public void addListener(FieldEventListener listener) {
        multicaster.addListener(listener);
    }

    @Override
    public boolean removeListener(FieldEventListener listener) {
        return multicaster.removeListener(listener);
    }
}